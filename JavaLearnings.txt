Learnings
How to use enum in java?
https://stackoverflow.com/questions/34476392/enum-inside-class

public enum Mode {buy, sell};
    public int maxProfit(int[] prices) {
        if (prices.length < 2)
        {
            return 0;
        }
        Mode m = Mode.buy;
        int min = prices[0];
        int max = Integer.MIN_VALUE;
        int bought = 0;
        int profit = 0;
        
        for (int i = 0; i < prices.length;)
        {
            if (m == Mode.buy)
            {
                do
                {
                    min = prices[i];
                    i++;
                }while(i < prices.length && prices[i] < min);
                bought = min;
                m = Mode.sell;
            }
.
.
}

2. Create and initialize int array

    int[] result = new int[]{1,2,3};

3. Ternary Operator
    int[] result = (digits[0] == 9 && digits[digits.length-1] == 9) ? new int[digits.length + 1] : 
                                                                                                   new int[digits.length];
4. ArrayList to int[]
    no way to do it, there is something called as Ints but it is not very clear

5. TreeSet
   Same as hashset but store in the sorted form
6. MultiSet
    Set implementation does not allow that but the below library allows it
import org.apache.commons.collections4.MultiSet; import org.apache.commons.collections4.multiset.HashMultiSet;

7. Type of exception:
	StackOverFlow exception
	Null Pointer Exception
	ArrayIndexOutOfBoundsException
Illegal argumentException

8. Comparator in PriorityQueue
	class NumberWithWeights {
    		int value;
    		int weight;
    
    		public NumberWithWeight(int val, int freq) {
       		 value = val;
        		 weight = freq;
    		}
	}

	class NumberComparator implements Comparator<NumberWithWeights> {
	public int compare(NumberWithWeights n1, NumberWithWeights n2) {
				if (n1.weight > n2.weight) {
				return 1;
				} else if (n1.weight < n2.weight) {
				return -1;
				} else {
				if (n1.value < n2.value) {
						return 1;
				} else if (n1.value > n2.value) {
						return -1;
				} else {
						return 0;
				}
				}
			}  
	}

	class Solution {
			public int[] topKFrequent(int[] nums, int k) {
				PriorityQueue<NumberWithWeights> valueQueue = new PriorityQueue<>(new NumberComparator());
		
				for (int i: nums) {
		    
				}
			}
	}

9. Conversion:
String to Int - Integer.valueOf(String)
Int to String - Integer.toString(int) 
String to CharArr - str.toCharArray();
String to Int - Integer.parseInt(str)
CharArr to string - String.valueOf(charArr)
character to int - (int)character;
ch - '0';

String to int - Integer.parseInt(str)
String to Long - Long.parseLong(str)
Find ArrayList to charArr - Better use StringBuilder
Get a subsequence in string builder = str.subsequence(0,7)

10. Comparison:

Character.toLowerCase(char)
Character.toUpperCase(char)


11. Max Integer - Integer.MAX_VALUE
    Min Integer - Integer.MIN_VALUE

12. Max of two numbers - Math.max(firstNumber, secondNumber)
13. slope between two points = (y - y1) / (x - x1)
14. find if three point fall in a straight line => (y - y1) / (x - x1) = (y1 - y0) / (x1 - x0) 
to avoid division by 0, (y - y1) * (x1 - x0) = (y1 - y0) * (x - x1)
15. Traverse the hashmap : 
for (Map.Entry<String,String> entry : gfg.entrySet())  {
           		 System.out.println("Key = " + entry.getKey() + 
                             	", Value = " + entry.getValue());
}
16. Random Number Generator- There is a Random class in java util library
	Random rand = new Random;
	//generate a random number between 0 and 99
	int value = rand.nextInt(100)

17. Comparator
class NumberComparator implements Comparator<NumberWithWeights> {
    public int compare(NumberWithWeights n1, NumberWithWeights n2) {
        if (n1.weight > n2.weight) {
            return -1;
        } else if (n1.weight < n2.weight) {
            return 1;
        } else {
            if (n1.value < n2.value) {
                return -1;
            } else if (n1.value > n2.value) {
                return 1;
            } else {
                return 0;
            }
        }
    }  
}

18. Filling all the elements in a row = Arrays.fill(arr, 0);

19. Never use ++ in recursion

20. ASCII table for string 


Dec  Char                           		Dec  Char    	 	Dec  Char     		Dec  Char
---------                             			---------     		---------     		----------
  0  NUL (null)                      		32  SPACE     		64  @         		96  `
  1  SOH (start of heading)          		33  !         		65  A         		97  a
  2  STX (start of text)             		34  "         		66  B         		98  b
  3  ETX (end of text)               		35  #         		67  C         		99  c
  4  EOT (end of transmission)       	36  $         		68  D        		100  d
  5  ENQ (enquiry)                   		37  %        		69  E        		101  e
  6  ACK (acknowledge)              		38  &         		70  F        		102  f
  7  BEL (bell)                      		39  '         		71  G        		103  g
  8  BS  (backspace)                 		40  (         		72  H        		104  h
  9  TAB (horizontal tab)            		41  )         		73  I        		105  i
 10  LF  (NL line feed, new line)    	42  *        		 74  J        		106  j
 11  VT  (vertical tab)             		43  +         		75  K        		107  k
 12  FF  (NP form feed, new page)    	44  ,        		 76  L        		108  l
 13  CR  (carriage return)           		45  -        		 77  M        		109  m
 14  SO  (shift out)                 		46  .         		78  N        		110  n
 15  SI  (shift in)                  		47  /         		79  O        		111  o
 16  DLE (data link escape)          		48  0         		80  P        		112  p
 17  DC1 (device control 1)          		49  1         		81  Q        		113  q
 18  DC2 (device control 2)          		50  2         		82  R        		114  r
 19  DC3 (device control 3)          		51  3         		83  S        		115  s
 20  DC4 (device control 4)          		52  4         		84  T        		116  t
 21  NAK (negative acknowledge)      	53  5         		85  U        		117  u
 22  SYN (synchronous idle)          	54  6         		86  V        		118  v
 23  ETB (end of trans. block)       	55  7         		87  W        		119  w
 24  CAN (cancel)                    		56  8         		88  X        		120  x
 25  EM  (end of medium)             	57  9         		89  Y        		121  y
 26  SUB (substitute)               		58  :         		90  Z        		122  z
 27  ESC (escape)                    		59  ;         		91  [        		123  {
 28  FS  (file separator)            		60  <         		92  \        		124  |
 29  GS  (group separator)           		61  =         		93  ]        		125  }
 30  RS  (record separator)          		62  >         		94  ^        		126  ~
 31  US  (unit separator)            		63  ?         		95  _        		127  DEL


21. Distance between two points(p1 = [0, 0], p2 = [0, 1])
public double dist(int[] p1, int[] p2) {
        return (p2[1] - p1[1]) * (p2[1] - p1[1]) + (p2[0] - p1[0]) * (p2[0] - p1[0]);
    }

22. Euclidean Distance
dist((x, y), (a, b)) = √(x - a)² + (y - b)²

23.  HashMap getOrDefault

The below code can be replaced with 
if (charMap.containsKey(c)) {
charMap.put(c, charMap.get(c) + 1);
} else {
charMap.put(c, 1);
}

we can do it as 
charMap.put(c, charMap.getOrDefault(c, 0) + 1);

Another way is,
Integer count = map.get(i);
map.put(i, count != null ? count+1 : 0);

24. Hashmap key as Double is not a good idea
	https://stackoverflow.com/questions/1074781/double-in-hashmap
	Depending on how java implements hashcode comparison for Double, it could lead to unpredicted result.

25. Lexographical comparison of string
       int compareTo(String str) :
It returns the following values:
if (string1 > string2) it returns a positive value.
if both the strings are equal lexicographically
i.e.(string1 == string2) it returns 0.
if (string1 < string2) it returns a negative value.

26. Reverse a list
      Collections.reverse(list);

27. Convert heap to hold max element
      Collections.reverseOrder();

28. Reading command line input
Three different ways for reading input from the user in the command line environment(console).
Using Buffered Reader Class
     //Enter data using BufferReader
     BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
     // Reading data using readLine
     String name = reader.readLine();
Using Scanner Class
Scanner in = new Scanner(System.in);
String s = in.nextLine();
Using Console Class
String name = System.console().readLine();

29.Reading multiple line from command line
 	while (input.hasNextLine()) { 
lineNew = input.nextLine(); 
}

30. Reading input from file
File file = new File("C:\\Users\\pankaj\\Desktop\\test.txt");
    	Scanner sc = new Scanner(file);
  
    	while (sc.hasNextLine())
      	System.out.println(sc.nextLine());
  	}
31. Iterator for Collections
Iterator value = set.iterator(); 
  
        	// Displaying the values after iterating through the set 
        	System.out.println("The iterator values are: "); 
        	while (value.hasNext()) { 
            		System.out.println(value.next());
	}

32. String split
	String[] arrOfStr = str.split("@", 2);

33. String substring
	String s = str.substring(2,5)
	2 - included
	5 - excluded
